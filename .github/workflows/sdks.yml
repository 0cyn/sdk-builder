# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: SDKs

on:
  push:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        version:
          - "14.7.1"
          - "14.7"
          - "14.6"
          - "14.5.1"
          - "14.5"
          - "14.4.2"
          - "14.4.1"
          - "14.4"
          - "14.3"
          - "14.2"
          - "14.1"
          - "14.0.1"
          - "14.0"
          - "13.7"
          - "13.6.1"
          - "13.6"
          - "13.5.1"
          - "13.5"
          - "13.4.1"
          - "13.4"
          - "13.3.1"
          - "13.3"
          - "13.2.3"
          - "13.2.2"
          - "13.2"
          - "13.1.3"
          - "13.1.2"
          - "13.1.1"
          - "13.1"
          - "13.0"

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10.0rc1
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.0-rc.1
    - name: Install blacktop/ipsw
      run: |
        brew install blacktop/tap/ipsw
    - name: Downloading IPSW
      run: |
        ipsw download --version ${{ matrix.version }} --device iPhone10,3
    - name: Extracting dyld_shared_cache from ipsw
      run: |
        ipsw extract -d $(ls *.ipsw | xargs)
        mv $(find . -name dyld_shared_cache_arm64 | xargs) ./
    - name: Set up python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install progressbar2 git+git://github.com/kritantadev/ktool@python3.10 git+git://github.com/arandomdev/dyldextractor
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Extracting binaries from dyld shared cache
      run: |
        dyldex_all dyld_shared_cache_arm64
        mv binaries/System ./
    - name: Building SDK
      run: |
        python sdk_builder.py
    - name: Compressing Artifact
      run: | 
        zip -r fws.zip .sdkbuilder
    - name: Upload Zipped PrivateFrameworks
      uses: actions/upload-artifact@v2.2.4
      with:
        name: ${{ matrix.version }}-SDK.zip
        path: fws.zip

  upload:
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release          # create a new release v1
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1
          release_name: iOS 13.0-14.7.1 SDKs
          draft: false
          prerelease: false
       - name: Attach binaries to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          assets=()
          for asset in ./bin/*; do               #loop the assets in the bin folder
            assets+=("-a" "$asset")
          done
          hub release edit "${assets[@]}" -m "Release v1" "v1" 